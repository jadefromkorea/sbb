# Database
# spring.h2.console.enabled: H2 콘솔에 접속할 것인지를 묻는 항목이다. 여기서는 true로 설정한다. H2 콘솔은 H2 데이터베이스를 웹 UI로 보여 준다.
# spring.h2.console.path: H2 콘솔로 접속하기 위한 URL 경로이다.
# spring.datasource.url: 데이터베이스에 접속하기 위한 경로이다.
# spring.datasource.driverClassName: 데이터베이스에 접속할 때 사용하는 드라이버 클래스명이다.
# spring.datasource.username: 데이터베이스의 사용자명이다(사용자명으로 기본값인 sa로 설정한다.).
# spring.datasource.password: 데이터베이스의 비밀번호이다(여기서는 로컬에서 개발 용도로만 사용하므로 비밀번호를 설정하지 않고 비워 두었다.).
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.datasource.url=jdbc:h2:~/local
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

#datasource:
#driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#url: jdbc:log4jdbc:postgresql://jadefromkorea.synology.me:54320/postgres
#username: postgres
#password: 123456

# JPA
# spring.jpa.properties.hibernate.dialect: 스프링 부트와 하이버네이트를 함께 사용할 때 필요한 설정 항목이다. 표준 SQL이 아닌 하이버네이트만의 SQL을 사용할 때 필요한 항목으로 하이버네이트의 org.hibernate.dialect.H2Dialect 클래스를 설정했다.
# spring.jpa.hibernate.ddl-auto: 엔티티를 기준으로 데이터의 테이블을 생성하는 규칙을 설정한다.
#
# none: 엔티티가 변경되더라도 데이터베이스를 변경하지 않는다.
# update: 엔티티의 변경된 부분만 데이터베이스에 적용한다.
# validate: 엔티티와 테이블 간에 차이점이 있는지 검사만 한다.
# create: 스프링 부트 서버를 시작할 때 테이블을 모두 삭제한 후 다시 생성한다.
# create-drop: create와 동일하지만 스프링 부트 서버를 종료할 때에도 테이블을 모두 삭제한다.
# 개발 환경에서는 보통 update 모드를 사용하고, 운영 환경에서는 none 또는 validate를 주로 사용한다.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.format_sql=true 
spring.jpa.properties.hibernate.show_sql=true

logging.level.org.hibernate.type=trace









